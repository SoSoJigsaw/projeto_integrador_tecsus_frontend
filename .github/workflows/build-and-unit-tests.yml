name: CI Pipeline - Build e Testes de Unidade antes de realizar um merge em um PULL REQUEST para a branch Main

# Declaração de variáveis de ambiente da pipeline que não possuem dados sensíveis
env:

  # Retorna o sistema operacional do runner (máquina virtual) que está executando o job.
  OS_VM: ${{ runner.os }}-node-
  
  # Retorna o cálculo do hash SHA-256 dos arquivos críticos do projeto (está sendo usado para gerar chaves de cache definindo como parâmetro arquivos que dão as definições e 
  # as dependências do projeto, para que elas sejam constantemente atualizadas corrretamente e que o build seja rápido, pois está sendo dado como informação arquivos 
  # que contém principalmente as informações sobre as dependências do projeto que podem influenciar a criação ou não do cache).
  KEY_CACHE: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/.eslintrc.cjs', '**/src/main.ts', '**/src/router/index.ts') }}

  # Retorna o cálculo do hash SHA-256 dos arquivos especificados (nesse caso, só pastas com informações de dependências, que são aquelas que há um desejo 
  # de fazer a recuperação das keys de cache com o parâmetro 'restore-keys', fazendo com que o GitHub Actions encontre um cache correspondente se a chave 
  # principal não tiver um hit exato. Útil para evitar rebuilds completos quando mudanças menores são feitas, melhorando o desempenho da pipeline em geral.
  RESTORE_KEYS: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}

  # Retorna o token de acesso automático, o que permite que 'actions' interajam com o repositório Github em nome do Github Actions.
  # Está sendo usado para autenticação em várias 'actions' envolvidas na pipeline que faz processos de escrita/mudança, como ao realizar deploy ou gerar uma nova release.
  # É a única variável usada que representa um dado sensível, sendo configurado dentro da ferramenta do Github chamada 'secrets', mantendo a integridade dos processos.
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# Instrução inicial: em que momentos o workflow deve ser rodado, no caso são em PR e pushs realizados diretamente na branch 'main'
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]


# Descrição de jobs de build, testes e uso de cache para otimizar o processamento da pipeline
jobs:
  
  build-and-test-with-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: ${{ env.KEY_CACHE }}
          restore-keys: |
            ${{ env.RESTORE_KEYS }}
            ${{ env.OS_VM }}
          upload-chunk-size: 262144  # em bytes (250 MB), tamanho de chunk ideal para processamento paralelo ou assíncrono, podendo aumentar o desempenho da pipeline
      - name: Install dependencies
        run: npm install
      - name: Run build
        run: npm run build
      - name: Run tests
        run: npm run test
