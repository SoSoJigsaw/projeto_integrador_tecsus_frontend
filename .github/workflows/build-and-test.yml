name: CI Pipeline - Build and Test

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

on:
  pull_request:
    branches: [main, gh-pages]
  push:
    branches: [main, gh-pages]

jobs:
  build-and-test-with-cache:
    runs-on: ubuntu-latest

    steps:
      - name: Set up cache variables
        id: cache-vars
        run: |
          echo "Setting up cache variables..."
          echo "OS_VM=${{ runner.os }}-node-" >> $GITHUB_ENV
          echo "KEY_CACHE=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/src/main.ts', '**/src/router/index.ts', '**/update-version.cjs') }}" >> $GITHUB_ENV
          echo "RESTORE_KEYS=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_ENV
          echo "Cache variables set."

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.KEY_CACHE }}
          restore-keys: |
            ${{ env.RESTORE_KEYS }}
            ${{ env.OS_VM }}
          upload-chunk-size: 262144

      - name: Install dependencies
        run: npm install

      - name: Audit and fix vulnerabilities
        run: npm audit fix

      - name: Remove existing snapshots
        run: npm run pretest

      - name: Run unit tests and coverage
        run: npm run coverage

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Install SonarQube Scanner
        run: npm run install-sonar-scanner

      - name: Execute sonar-scanner at the project and save in SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=projeto_integrador_tecsus_frontend \
            -Dsonar.organization=quarks-devops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Publish test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-results
          path: test-results.xml

      - name: Publish code coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results
          path: coverage/

      - name: Publish SonarQube scanner results
        uses: actions/upload-artifact@v4
        with:
          name: sonar-scanner-results
          path: .scannerwork/

  update-code-version:
    runs-on: ubuntu-latest
    needs: [build-and-test-with-cache]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new commits
        id: check_commits
        run: |
          echo "Checking for new commits since the last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "$LAST_TAG" = "0.0.0" ]; then
            echo "No previous tags found."
            echo "new_commits=true" >> $GITHUB_ENV
          else
            NEW_COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if [ -z "$NEW_COMMITS" ]; then
              echo "No new commits since the last tag."
              echo "new_commits=false" >> $GITHUB_ENV
            else
              echo "New commits found."
              echo "new_commits=true" >> $GITHUB_ENV
            fi
          fi

      - name: Bump version and set env
        id: generate_tag
        if: env.new_commits == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const { execSync } = require('child_process');

            const lastTag = execSync('git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0"').toString().trim();
            console.log(`Last tag: ${lastTag}`);
            let [major, minor, patch] = lastTag.split('.').map(Number);

            if (isNaN(major) || isNaN(minor) || isNaN(patch)) {
              [major, minor, patch] = [0, 0, 0];
            }

            patch++;
            if (patch > 9) {
              patch = 0;
              minor++;
              if (minor > 9) {
                minor = 0;
                major++;
              }
            }

            const newTag = `${major}.${minor}.${patch}`;
            console.log(`New tag: ${newTag}`);

             // Set the environment variable
            core.setOutput('NEW_TAG', newTag);

      - name: Set new tag environment variable
        run: echo "NEW_TAG=${{ steps.generate_tag.outputs.NEW_TAG }}" >> $GITHUB_ENV

      - name: Use new tag
        run: echo "Using new tag ${{ env.NEW_TAG }}"

      - name: Verify update-version.cjs existence
        if: env.new_commits == 'true'
        run: |
          if [ ! -f update-version.cjs ]; then
            echo "update-version.cjs not found!"
            exit 1
          fi

      - name: Update package.json and package-lock.json
        if: env.new_commits == 'true'
        run: node update-version.cjs ${{ env.NEW_TAG }}
        env:
          NEW_TAG: ${{ env.NEW_TAG }}

      - name: Commit and create pull request for version bump
        if: env.new_commits == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            
            try {
              // Set git user config
              execSync('git config --global user.email "action@github.com"');
              execSync('git config --global user.name "GitHub Action"');

              // Ensure the main branch is checked out and up to date
              execSync('git checkout main');
              execSync('git pull origin main');

              // Check for changes before committing
              const status = execSync('git status --porcelain').toString().trim();
              console.log('Git status output:', status);
              if (status) {
                // Create a new branch for the version bump
                const sanitizedTag = process.env.NEW_TAG.replace(/[^a-zA-Z0-9-_]/g, '-');
                const branchName = `bump-version-${sanitizedTag}`;
                execSync(`git checkout -b ${branchName}`);

                // Add files to staging
                execSync('git add package.json package-lock.json');

                // Commit changes
                execSync(`git commit -m "Update version to ${process.env.NEW_TAG}"`);

                // Push changes to the new branch
                execSync(`git push origin ${branchName}`);

                // Create a pull request
                const { data: pullRequest } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Bump version to ${process.env.NEW_TAG}`,
                  head: branchName,
                  base: 'main',
                  body: 'Automated version bump',
                  maintainer_can_modify: true
                });

                console.log(`Pull request created: ${pullRequest.html_url}`);
              } else {
                console.log('No changes to commit.');
              }
            } catch (error) {
              console.error('Error during commit and pull request creation:', error);
              throw error;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          NEW_TAG: ${{ env.NEW_TAG }}

      - name: Ensure we are on main branch
        if: env.new_commits == 'true'
        run: |
          git checkout main

      - name: Push changes
        if: env.new_commits == 'true'
        run: |
          git push origin main

      - name: Store Status Check
        id: store_status_check
        run: echo "true" > status_check.txt
        if: ${{ always() }}

      - name: Upload Status Check File
        uses: actions/upload-artifact@v4
        with:
          name: status-check
          path: status_check.txt
