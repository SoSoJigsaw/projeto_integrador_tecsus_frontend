name: CI Pipeline - Build and Test

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build-and-test-with-cache:
    runs-on: ubuntu-latest

    steps:
      - name: Set up cache variables
        id: cache-vars
        run: |
          echo "Setting up cache variables..."
          echo "OS_VM=${{ runner.os }}-node-" >> $GITHUB_ENV
          echo "KEY_CACHE=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/src/main.ts', '**/src/router/index.ts', '**/update-version.cjs') }}" >> $GITHUB_ENV
          echo "RESTORE_KEYS=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_ENV
          echo "Cache variables set."

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node Environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.KEY_CACHE }}
          restore-keys: |
            ${{ env.RESTORE_KEYS }}
            ${{ env.OS_VM }}
          upload-chunk-size: 262144

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

      - name: Run unit tests
        run: npm run test

      - name: Run coverage
        run: npm run coverage

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Install SonarQube Scanner
        run: npm run install-sonar-scanner

      - name: Execute sonar-scanner at the project and save in SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=projeto_integrador_tecsus_frontend \
            -Dsonar.organization=quarks-devops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  update-code-version:
    runs-on: ubuntu-latest
    needs: [build-and-test-with-cache]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for new commits
        id: check_commits
        run: |
          echo "Checking for new commits since the last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "$LAST_TAG" = "0.0.0" ]; then
            echo "No previous tags found."
            echo "new_commits=true" >> $GITHUB_ENV
          else
            NEW_COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if [ -z "$NEW_COMMITS" ]; then
              echo "No new commits since the last tag."
              echo "new_commits=false" >> $GITHUB_ENV
            else
              echo "New commits found."
              echo "new_commits=true" >> $GITHUB_ENV
            fi
          fi

      - name: Bump version and set env
        id: tag_version
        if: env.new_commits == 'true'
        run: |
          echo "Bumping version..."
          git config --global --add safe.directory /github/workspace
          DEFAULT_BUMP="patch"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "$LAST_TAG" = "0.0.0" ]; then
            NEW_TAG="0.0.1"
          else
            IFS='.' read -r -a TAG_PARTS <<< "$LAST_TAG"
            MAJOR=${TAG_PARTS[0]}
            MINOR=${TAG_PARTS[1]}
            PATCH=${TAG_PARTS[2]}
            PATCH=$((PATCH + 1))
            NEW_TAG="$MAJOR.$MINOR.$PATCH"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Verify update-version.cjs existence
        if: env.new_commits == 'true'
        run: |
          if [ ! -f update-version.cjs ]; then
            echo "update-version.cjs not found!"
            exit 1
          fi

      - name: Update package.json and package-lock.json
        if: env.new_commits == 'true'
        run: node update-version.cjs ${{ env.NEW_TAG }}

      - name: Commit updated version files
        if: env.new_commits == 'true'
        run: |
          echo "Committing updated version files..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Update version to $NEW_TAG"

      - name: Pull changes from main branch
        if: env.new_commits == 'true'
        run: |
          echo "Pulling changes from main branch..."
          git config pull.ff only
          git pull origin main

      - name: Wait for status check
        id: check_status
        run: |
          echo "Checking status checks for the last commit..."
          REF=$(git rev-parse HEAD)
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          echo "Commit ref: $REF"
          echo "Repository: $OWNER/$REPO"
          SUCCESS=false
          for i in {1..10}; do
            echo "Attempt $i: Checking status..."
            CHECK_RUNS=$(curl -s -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
              "https://api.github.com/repos/$OWNER/$REPO/commits/$REF/status")
            echo "CHECK_RUNS: $CHECK_RUNS"
            STATUS=$(echo "$CHECK_RUNS" | jq -r '.statuses[] | select(.context == "build-and-test-with-cache") | .state')
            if [ "$STATUS" = "success" ]; then
              SUCCESS=true
              break
            else
              echo "Current status: $STATUS"
              echo "Status check not yet successful. Waiting..."
              sleep 10
            fi
          done
          if [ "$SUCCESS" = false ]; then
            echo "Required status check 'build-and-test-with-cache' not found or not successful."
            exit 1
          fi
          echo "Status check successful."

      - name: Push changes
        if: env.new_commits == 'true' && steps.check_status.outputs.SUCCESS == 'true'
        run: |
          echo "Pushing changes to main branch..."
          git push https://${{ secrets.REPO_ACCESS_TOKEN }}@github.com/quarks-team/projeto_integrador_tecsus_frontend.git main

      - name: Store Status Check
        id: store_status_check
        run: echo "true" > status_check.txt
        if: ${{ always() }}

      - name: Upload Status Check File
        uses: actions/upload-artifact@v3
        with:
          name: status-check
          path: status_check.txt
