name: CI Pipeline - Build and Test


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # `${{ runner.os }}-node-` Retorna o sistema operacional do runner (máquina virtual) que está executando o job.

  # `${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/.eslintrc.cjs', '**/src/main.ts', '**/src/router/index.ts') }}` 
  # Retorna o cálculo do hash SHA-256 dos arquivos críticos do projeto (está sendo usado para gerar chaves de cache definindo como parâmetro arquivos que dão as definições e 
  # as dependências do projeto, para que elas sejam constantemente atualizadas corrretamente e que o build seja rápido, pois está sendo dado como informação arquivos 
  # que contém principalmente as informações sobre as dependências do projeto que podem influenciar a criação ou não do cache).

  # `${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}` 
  # Retorna o cálculo do hash SHA-256 dos arquivos especificados (nesse caso, só pastas com informações de dependências, que são aquelas que há um desejo 
  # de fazer a recuperação das keys de cache com o parâmetro 'restore-keys', fazendo com que o GitHub Actions encontre um cache correspondente se a chave 
  # principal não tiver um hit exato. Útil para evitar rebuilds completos quando mudanças menores são feitas, melhorando o desempenho da pipeline em geral.


# Instrução inicial: em que momentos o workflow deve ser rodado, no caso são em PR e pushs realizados diretamente na branch 'main'
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Descrição de jobs de build, testes e uso de cache para otimizar o processamento da pipeline
jobs:
  
  build-and-test-with-cache:
  
    runs-on: ubuntu-latest
    
    steps:

       - name: Set up cache variables
         id: cache-vars
         run: |
           echo "OS_VM=${{ runner.os }}-node-" >> $GITHUB_ENV
           echo "KEY_CACHE=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/.eslintrc.cjs', '**/src/main.ts', '**/jest.config.js', '**/src/router/index.ts') }}" >> $GITHUB_ENV
           echo "RESTORE_KEYS=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_ENV

       - name: Checkout Repository
         uses: actions/checkout@v2
         with:
          fetch-depth: 0

       - name: Setup Node Environment
         uses: actions/setup-node@v2
         with:
          node-version: '20.x'
          cache: 'npm'
       
       - name: Cache node modules
         uses: actions/cache@v4.0.2
         with:
          path: node_modules
          key: ${{ env.KEY_CACHE }}
          restore-keys: |
            ${{ env.RESTORE_KEYS }}
            ${{ env.OS_VM }}
          upload-chunk-size: 262144  # em bytes (250 MB), tamanho de chunk ideal para processamento paralelo ou assíncrono, podendo aumentar o desempenho da pipeline
      
       - name: Install dependencies
         run: npm install
      
       - name: Run build
         run: npm run build
      
       - name: Run unit tests
         run: npm run test

  # Caso a realização da build e dos testes não falharem, essa action realizará a atualização
  # da versão do software no código-fonte, dentro dos arquivos package.json e package-lock.json 
  push-changes-of-version:
  
    needs: [build-and-test-with-cache]
  
    runs-on: ubuntu-latest
    
    steps:
    
      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch

      - name: Verify update-version.js existence
        run: |
          if [ ! -f ./update-version.js ]; then
            echo "update-version.js not found!"
            exit 1
          fi
          
      - name: Update package.json and package-lock.json
        run: node ./update-version.js ${{ steps.tag_version.outputs.new_tag }}
        
      - name: Commit updated version files
        run: |
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add package.json package-lock.json
              git commit -m "Update version to ${{ steps.tag_version.outputs.new_tag }}"
              git push
