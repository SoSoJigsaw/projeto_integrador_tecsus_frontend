name: CI Pipeline - Build and Test

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build-and-test-with-cache:
    runs-on: ubuntu-latest

    steps:
      - name: Set up cache variables
        id: cache-vars
        run: |
          echo "OS_VM=${{ runner.os }}-node-" >> $GITHUB_ENV
          echo "KEY_CACHE=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/.eslintrc.cjs', '**/src/main.ts', '**/jest.config.js', '**/src/router/index.ts') }}" >> $GITHUB_ENV
          echo "RESTORE_KEYS=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node Environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.KEY_CACHE }}
          restore-keys: |
            ${{ env.RESTORE_KEYS }}
            ${{ env.OS_VM }}
          upload-chunk-size: 262144

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

      - name: Run unit tests
        run: npm run test

      - name: Run coverage
        run: npm run coverage

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      - name: Execute Sonar Scanner and save results to SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=projeto_integrador_tecsus_frontend \
            -Dsonar.organization=quarks-devops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

      - name: Upload build artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ./dist

  push-changes-of-version:
    needs: [build-and-test-with-cache]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up /github/workspace as a safe directory
        run: git config --global --add safe.directory /github/workspace

      - name: Check out to the main branch
        run: |
          git fetch origin
          git checkout main

      - name: Check for new commits
        id: check_commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "$LAST_TAG" = "0.0.0" ]; then
            echo "No previous tags found."
            echo "new_commits=true" >> $GITHUB_ENV
          else
            NEW_COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if [ -z "$NEW_COMMITS" ]; then
              echo "No new commits since the last tag."
              echo "new_commits=false" >> $GITHUB_ENV
            else
              echo "New commits found."
              echo "new_commits=true" >> $GITHUB_ENV
            fi
          fi

      - name: Bump version and push tag
        id: tag_version
        if: env.new_commits == 'true'
        run: |
          git config --global --add safe.directory /github/workspace
          DEFAULT_BUMP="patch"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "$LAST_TAG" = "0.0.0" ]; then
            NEW_TAG="0.0.1"
          else
            IFS='.' read -r -a TAG_PARTS <<< "$LAST_TAG"
            MAJOR=${TAG_PARTS[0]}
            MINOR=${TAG_PARTS[1]}
            PATCH=${TAG_PARTS[2]}
            PATCH=$((PATCH + 1))
            NEW_TAG="$MAJOR.$MINOR.$PATCH"
          fi
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
          echo "::set-output name=new_tag::$NEW_TAG"

      - name: Check new tag output
        if: env.new_commits == 'true'
        run: echo "New tag is ${{ steps.tag_version.outputs.new_tag }}"

      - name: Verify update-version.cjs existence
        if: env.new_commits == 'true'
        run: |
          if [ ! -f update-version.cjs ]; then
            echo "update-version.cjs not found!"
            ls -al
            exit 1
          fi

      - name: Update package.json and package-lock.json
        if: env.new_commits == 'true'
        run: node update-version.cjs ${{ steps.tag_version.outputs.new_tag }}

      - name: Show updated files
        if: env.new_commits == 'true'
        run: |
          echo "Contents of package.json:"
          cat package.json
          echo "Contents of package-lock.json:"
          cat package-lock.json

      - name: Commit updated version files
        if: env.new_commits == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Update version to ${{ steps.tag_version.outputs.new_tag }}"

      - name: Wait for status check of build-and-test-with-cache (branch rule)
        if: env.new_commits == 'true'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const ref = context.ref;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const checkRunsResponse = await github.rest.repos.getCombinedStatusForRef({
              owner,
              repo,
              ref,
            });

            const statusChecks = checkRunsResponse.data.statuses.filter(
              (check) => check.context === 'build-and-test-with-cache'
            );

            if (statusChecks.length === 0) {
              throw new Error('Required status check "build-and-test-with-cache" not found.');
            }

            const statusCheck = statusChecks[0];

            if (statusCheck.state !== 'success') {
              throw new Error(`Status check "build-and-test-with-cache" has not passed. State: ${statusCheck.state}`);
            }

            console.log('Status check passed successfully.');
            process.env.STATUS_CHECK_PASSED = 'true';

      - name: Push changes
        if: env.new_commits == 'true' && env.STATUS_CHECK_PASSED == 'true'
        run: |
          git push https://SoSoJigsaw:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/quarks-team/projeto_integrador_tecsus_frontend.git main --force
