name: CI Pipeline - Deploy Automático

# Declaração de variáveis de ambiente da pipeline que não possuem dados sensíveis
env:

  # Retorna o sistema operacional do runner (máquina virtual) que está executando o job.
  OS_VM: ${{ runner.os }}-node-
  
  # Retorna o cálculo do hash SHA-256 dos arquivos críticos do projeto (está sendo usado para gerar chaves de cache definindo como parâmetro arquivos que dão as definições e 
  # as dependências do projeto, para que elas sejam constantemente atualizadas corrretamente e que o build seja rápido, pois está sendo dado como informação arquivos 
  # que contém principalmente as informações sobre as dependências do projeto que podem influenciar a criação ou não do cache).
  KEY_CACHE: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/.eslintrc.cjs', '**/src/main.ts', '**/jest.config.js', '**/src/router/index.ts') }}

  # Retorna o cálculo do hash SHA-256 dos arquivos especificados (nesse caso, só pastas com informações de dependências, que são aquelas que há um desejo 
  # de fazer a recuperação das keys de cache com o parâmetro 'restore-keys', fazendo com que o GitHub Actions encontre um cache correspondente se a chave 
  # principal não tiver um hit exato. Útil para evitar rebuilds completos quando mudanças menores são feitas, melhorando o desempenho da pipeline em geral.
  RESTORE_KEYS: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}

  # Retorna o token de acesso automático, o que permite que 'actions' interajam com o repositório Github em nome do Github Actions.
  # Está sendo usado para autenticação em várias 'actions' envolvidas na pipeline que faz processos de escrita/mudança, como ao realizar deploy ou gerar uma nova release.
  # É a única variável usada que representa um dado sensível, sendo configurado dentro da ferramenta do Github chamada 'secrets', mantendo a integridade dos processos.
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# Instrução inicial: em que momentos o workflow deve ser rodado, no caso são em PR e pushs realizados diretamente na branch 'main'
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]


# Descrição de jobs de build, testes e uso de cache para otimizar o processamento da pipeline
jobs:
  
  # Pushs diretamente na branch 'main' só ocorrem em nosso projeto através das actions de automação dessa cadeia 
  # de CI, que é o caso do uso da action de deploy automático. A próxima action busca atualizar os arquivos de dependências 
  # do projeto para atualizar a versão também no código-fonte para a rastreabilidade
  push-changes-of-version:
    needs: [build-and-test-with-cache, authorized-merge]
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    steps:
        - name: Bump version and push tag
          id: tag_version
          uses: anothrNick/github-tag-action@1.26.0
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DEFAULT_BUMP: patch
         # Action que executa script js que atualiza o valor de 'version' nos arquivos package.json e package-lock.json, responsáveis pelas informações sobre o projeto e dependências. 
         # Passo importante para a rastreabilidade e transparência com os usuários da versão que estão utilizando do projeto.
        - name: Update package.json and package-lock.json
          run: node update-version.js ${{ steps.tag_version.outputs.new_tag }}
        - name: Commit updated version files
          run: |
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add package.json package-lock.json
                git commit -m "Update version to ${{ steps.tag_version.outputs.new_tag }}"
                git push

              
  # Descrição do job de deploy automático a partir da branch 'main', 
  # acionando a condição de gerar um novo deploy no Github Pages da versão mais atualizada do projeto.
  deploy-on-github-pages:
    needs: [build-and-test-with-cache, authorized-merge, push-changes-of-version]
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: '20'
      - name: Build
        run: npm run build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          publish_dir: ./dist
